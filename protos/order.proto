syntax = "proto3";

package aether;

// Service definition for the matching engine
service MatchingEngine {
    // Submit a new order to the engine
    rpc SubmitOrder(OrderRequest) returns (OrderConfirmation);

    // Stream live trade executions for a given security
    rpc StreamTrades(StreamRequest) returns (stream Trade);

    // Stream live L2 order book snapshots for a given security
    rpc StreamOrderBook(StreamRequest) returns (stream OrderBookSnapshot);
}

// Enums for order properties
enum OrderSide {
    SIDE_UNKNOWN = 0;
    BUY = 1;
    SELL = 2;
}

enum OrderType {
    TYPE_UNKNOWN = 0;
    MARKET = 1;
    LIMIT = 2;
}

// Message definitions
message OrderRequest {
    uint64 security_id = 1;
    OrderSide side = 2;
    OrderType type = 3;
    uint32 quantity = 4;
    double price = 5; // Ignored for MARKET orders
}

message OrderConfirmation {
    uint64 order_id = 1;
    bool accepted = 2;
    string reason = 3; // e.g., "Accepted", "Insufficient funds"
}

message StreamRequest {
    uint64 security_id = 1;
}

message Trade {
    uint64 trade_id = 1;
    uint64 security_id = 2;
    double price = 3;
    uint32 quantity = 4;
    int64 timestamp_ns = 5; // Nanosecond epoch time
}

message OrderBookLevel {
    double price = 1;
    uint32 aggregate_quantity = 2;
}

message OrderBookSnapshot {
    uint64 security_id = 1;
    repeated OrderBookLevel bids = 2;
    repeated OrderBookLevel asks = 3;
    int64 timestamp_ns = 4;
}